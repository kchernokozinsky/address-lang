main
!

insert ... ∅ => root;  ∅ => node 
    P { 'root > 'node }  ↓ gte
        P { '(root + 1) = ∅ } node => root + 1 ↓ П insert {'(root + 1), node}
            ᗺ
    gte ... 
        P { '(root + 2) = ∅ } node => root + 2 ↓ П insert {'(root + 2), node}
            ᗺ
ᗺ

rem ... ∅ => father; ∅ => node; ∅ => val; 
    P { 'node = 'val } ↓ to_find
        П is_leaf {node, is_leaf}
        P { 'is_leaf}  ↓ case2
        P { node = '(father + 1)} ∅ => father + 1 ↓ ∅ => father + 2
        ᗺ
    case2 ...
        П has_one_son {node, son}
        P { 'son = ∅  } case3 ↓ 
        P { node = '(father + 1)} 'son => father + 1 ↓ 'son => father + 2
        ᗺ
    case3 ...
    
    П min {node, leaf}

    П rem {father, node, 'leaf}

    P { node = '(father + 1)} 'leaf => father + 1 ↓ 'leaf => father + 2
    '(node + 1) => 'leaf + 1; '(node + 2) => 'leaf + 2
    ᗺ

    to_find...
    P { 'node < 'val }  ↓ lte1        
        P { '(node + 2) = ∅ } Print{"elem not found"} ↓ П rem {node, '(node + 2), val}
        ᗺ
    lte1 ...
        P { '(node + 1) = ∅ } Print{"elem not found"} ↓ П rem {node, '(node + 1), val}
        ᗺ

min ... ∅ => node; ∅ => leaf;
    П is_leaf {node, is_leaf}
    P { 'is_leaf} ↓ not_leaf
        node => leaf
        ᗺ
    not_leaf...
    П has_one_son {node, son}
    P { 'son = ∅ } two_sons↓ 
        П min {'son, leaf}
        ᗺ
    two_sons ...
    n1 = '(node + 1)
    n2 = '(node + 2)
    P { 'n1 < 'n2 } П min {n1, leaf} ↓ П min {n2, leaf}
ᗺ

is_leaf ... ∅ => node; ∅ => is_leaf
    '(node + 1) = ∅ and '(node + 2) = ∅ => is_leaf
ᗺ

has_one_son ... ∅ => node; ∅ => one_son
    P { '(node + 1) != ∅ and '(node + 2) != ∅} ᗺ ↓
    P { '(node + 1) = ∅ and '(node + 2) = ∅} ᗺ ↓
    P { '(node + 1) = ∅ } '(node + 2) => one_son ↓ '(node + 1) => one_son
ᗺ

find ... ∅ => root;  ∅ => val; ∅ => found 
    P { 'root = 'val } ↓ not_eq
        Print {'val}
        true => found
        ᗺ
    not_eq...
    P { 'root < 'val } ↓ lte
        P { '(root + 2) = ∅ } false => found ↓ П find {'(root + 2), val, found}
        ᗺ
    lte ...
        l = root + 1
        P { '(root + 1) = ∅ } false => found ↓ П find { '(root + 1), val, found}
ᗺ
    
node... ∅ => val
    ∅ => val + 1
    ∅ => val + 2
ᗺ


main ...
100 => root
П node {root}

20 => a
П node {a}


50 => b
П node {b}

300 => c
П node {c}

150 => d
П node {d}

10 => e
П node {e}
 
20 => val

П insert {root, a}
П insert {root, b}
П insert {root, c}
П insert {root, d}
П insert {root, e}
П print_tree {root}
Print {"----------------------------------------------------------------"}
П rem {father,root, a}
П print_tree {root}