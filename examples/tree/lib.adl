root = ["root"]

a = ["a"]
b = ["b"]
c = ["c"]
d = ["d"]
e = ["e"]
f = ["f"]

SP add_son {root, a}
SP add_son {root, b}
SP add_son {root, c}
SP add_son {c, d}
SP add_son {c, e}
SP add_son {c, f}

# SP print_sons {root}

"e" => val
false => found 
SP dfs {root, val, found}
Print {'found}


!

dfs ... null => root; null => val; null => found
    P { '(root + 1) == val } | @not_equal
        true => found
        return
    not_equal ...
    SP sons {root, sons, len}
    P {len == 0} return |
    L {0, 1, 'i < 'len => i} l
        cur_node = D{'sons, 'i}       
        SP dfs {cur_node, val, found}
        P { 'found } return |
    l ...

return

sons ... null => n; null => s; null => len
    D {n, -1} => s
    SP len_list {s, len}
return

add_son ... null => root; null => son 
     root => son
return 


print ... null => val
    L {0, 1, 'j < 5 => j} r
  Print {'j}
    r ...

return 


# ---------- utils ---------
print_list ... null => list
    'str = "[" 
    L {0, 1, true => i } l3
            P {D {list, 'i} == null} @end | 'str = Concat {'str,'('(D {list, 'i} + 1) + 1),","}
    l3 ... 
end...
Print {'str, "]"}
return

sons ... null => n; null => s; null => len
    D {n, -1} => s
    SP len_list {s, len}
return

rem_mul_deref_results... null => sons; null => len
    P {'sons == null } | SP rem_list {'sons} 
    null => len 
    null => sons
return

print_sons ... null => n;
    Print {"----------------------------------------------------------------"}
    SP sons {n, sons, len}
    P {'len == 0} Print {"[]"} | SP print_list {'sons} 
    Print {"----------------------------------------------------------------"}
    SP rem_mul_deref_results {sons, len}
return
    
len_list ... null => list; null => len
    P { 'list == null} | @count
    0 => len
    return
    count ... 
    l = 'list
    L {0, 1, true => i } l1
        
    P {D {l, 'i} == null} | @k
            'len = 'i; 
            return
        k...
    l1 ... 
return  

rem_list ... null => list;

    null => (list + 1)
    P {'list == null} return | next = 'list
    null => list
    SP rem_list {next} 
    
    
return  