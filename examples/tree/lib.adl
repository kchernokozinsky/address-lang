root = [100000]

a = [20000]
b = [50000]
SP insert {root, a}

SP print_sons {a}
SP insert {root, [10000]}
SP print_sons {a}
SP insert {root, b}
SP print_sons {a}
SP insert {root, [30000]}


!


insert ... null => root; null => new_son
    Print {"Start with son: ", '(new_son + 1), " and root: ", '(root + 1)}
    SP sons {root, sons}
    SP len_list {sons, len}
    Print {"len: ", 'len}
    P {'len == 0 } | @one

        null => len 
        root => new_son
        return

    one ...
    P {'len == 1 } | @two
        n = '('sons + 1)
        Print {"one"}
        # P { '(n + 1) }
        Print {('(new_son + 1) < '(root + 1) and '(n + 1) < '(root + 1))}
        P { ('(new_son + 1) < '(root + 1) and '(n + 1) < '(root + 1)) or  ('(new_son + 1) > '(root + 1) and '(n + 1) > '(root + 1))} | @insert1
            Print {"sdds"}
            SP rem_list {'sons}
            null => len
            null => sons
            SP insert {n, new_son}
            return
        insert1...

            Print {"insert1..."}
            SP rem_list {'sons}
            null => len 
            null => sons
            root => new_son
            return
    two ...
    Print {"two"}
    l = '('sons + 1)
    r = '(''sons + 1)
    SP rem_list {'sons}
    null => len 
    null => sons
    # left son should be less, otherwise they are exhanched
    P { '(l + 1) > '(r + 1) } c = l; l = r; r = c | 
    Print {"condition: ", '(root + 1) > '(new_son + 1) }
    P { '(root + 1) > '(new_son + 1) } SP insert {l, new_son} | SP insert {r, new_son}
    return
    

print_list ... null => list
    'str = "[" 
    L {0, 1, true => i } l3
            P {D {list, 'i} == null} @end | 'str = Concat {'str,'('(D {list, 'i} + 1) + 1),","}
    l3 ... 
end...
Print {'str, "]"}
return

sons ... null => n; null => s 
    D {n, -1} => s
return

print_sons ... null => n;
    Print {"----------------------------------------------------------------"}
    D {n, -1} => d
    SP len_list {d, len}
    P {'len == 0} Print {"[]"} | SP print_list {'d} 
    Print {"----------------------------------------------------------------"}
    P {'len == 0 } | SP rem_list {'d}
    nul => len
    null => d
return
    
len_list ... null => list; null => len
    P { 'list == null} | @count
    0 => len
    return
    count ... 
    l = 'list
    L {0, 1, true => i } l1
        
    P {D {l, 'i} == null} | @k
            'len = 'i; 
            return
        k...
    l1 ... 
return  

rem_list ... null => list;

    null => (list + 1)
    P {'list == null} return | next = 'list
    null => list
    SP rem_list {next} 
    
    
return  