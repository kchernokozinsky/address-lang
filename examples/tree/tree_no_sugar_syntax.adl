# head address inizialization
root = 0; 
node1 = 40;
node2 = 80;
node3 = 145;

# associate root addresses 
'root = 10; ''root = 8

# associate node1 addresses 
'node1 = 110; ''node1 = 18

# associate node2 addresses 
'node2 = 130; ''node2 = 143

#fill elements root with values
'(root + 1)    = "root_value"; 
'('root + 1)   = 40; 
'(''root + 1)  = 80; 

#fill elements node1 with values
'(node1 + 1)    = "node1_value"; 
'('node1 + 1)   = 145; 
'(''node1 + 1)  = null; 

#fill elements node2 with values
'(node2 + 1)    = "node2_value"; 
'('node2 + 1)   = null; 
'(''node2 + 1)  = null; 

# Start of Tree Traversal
i_a = 100; cur_a = root
L { 0, 1, 'cur_a != null => i_a} end end
    
    P { 'i_a == 0} Print {'(cur_a + 1)}| 
    cur_a = 'cur_a
    P { '(cur_a + 1) != null } @k | @ a
    
    k ... 
        i_b = 101; cur_b = '(cur_a + 1)
        # iterate over sub list elements and print its values
        L { 0, 1, 'cur_b != null => i_b} a a 
            P { 'i_b == 0} | cur_b = 'cur_b
            Print { "--sub_element: ", 'i_b, ": ", '(cur_b + 1) } 
    a ... 
    
    Print { "element ", 'i_a, ": ", '(cur_a + 1) } 

end ...

