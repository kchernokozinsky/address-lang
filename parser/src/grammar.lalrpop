use crate::ast::*;
use lexer::errors::LexError;
use common::location::Location as LexLocation;
use lexer::token::TokenKind;
grammar;

pub Algorithm: Algorithm = {
    <lines:FileLine*> => Algorithm::Body(lines)
};

pub FileLine: FileLine = {
         <labels: LabelsDeclaration?> <statements:Statements> "EndOfFile"=> { 
        match labels {
                        Some(labels) => FileLine::Line{labels, statements: statements},
                        None => FileLine::Line{labels: vec![], statements: statements}
                    }
                },
        <labels: LabelsDeclaration?> <statements:Statements> "NewLine"=> { 
        match labels {
                        Some(labels) => FileLine::Line{labels, statements: statements},
                        None => FileLine::Line{labels: vec![], statements: statements}
                    }
                },
};

pub LabelsDeclaration: Vec<String> = {
    <labels: Labels> "..." => labels
};

#[inline]
Labels: Vec<String> = { // (1)
    <mut v:(<Identifier> ",")*> <e:Identifier?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub OneLineStatement: OneLineStatement = {
    CallSubProgram,
    UnconditionalJump,
    Loop,
    Predicate,
    <l_location:@L> "!" <r_location:@L> => OneLineStatement
        {
            l_location,
            r_location,
            node: OneLineStatementKind::Exit,
        },
    <l_location:@L> "Return" <r_location:@L> => OneLineStatement
        {
            l_location,
            r_location,
            node: OneLineStatementKind::Return
        }
};

pub CallSubProgram: OneLineStatement = {
    <l_location:@L> "SubProgram" <sp_name: SubProgramName> "{" <args: Parameters> "}" <label_to: Identifier?> <r_location:@L> => OneLineStatement
        {
            l_location,
            r_location,
            node: OneLineStatementKind::SubProgram
                {
                sp_name,
                args: args.into_iter().map(Box::new).collect(),
                label_to
                }
}
};

SubProgramName: Label = {
    <mod_alias: (<Identifier> ":")?> <identifier: Identifier> => Label {
        identifier,
        mod_alias,
    },
};

pub Predicate: OneLineStatement = {
    <l_location:@L> "Predicate" "{" <condition:ExpressionPrecedence8> "}" <l:Statements> "|" <r:Statements> <r_location:@L> => OneLineStatement
        {
            l_location,
            r_location,
            node: OneLineStatementKind::Predicate
                {
                condition,
                if_true: Box::new(l),
                if_false: Box::new(r)
                }
        }
};

pub Loop: OneLineStatement = {
    <l_location:@L> "Loop" "{" <a:Expression> "," <b:Expression> "," <c:Expression>  "=>" <e: Expression> "}" <alpha: Identifier> <betta: Identifier?> <r_location:@L> => OneLineStatement
        {
            l_location,
            r_location,
            node: OneLineStatementKind::Loop
                {
                initial_value: a,
                step: b,
                last_value_or_condition: c,
                iterator: e,
                label_until: alpha, 
                label_to: betta 
                }
        }

};

pub UnconditionalJump: OneLineStatement = {
    <l_location:@L> "@" <label: Identifier> <r_location:@L> => OneLineStatement
        {
            l_location,
            r_location,
            node: OneLineStatementKind::UnconditionalJump{label},
        }
};

pub Import: SimpleStatement = {
    <l_location:@L> "Import" "{" <labels: Labels> "}" "From" <path: Path> <alias:("As" <Identifier>)?> <r_location:@L> => SimpleStatement
        {
            l_location,
            r_location,
            node: SimpleStatementKind::Import{
                labels,
                path,
                alias
            },
        }
};

Path: Path =
    <a:"::"?> <h:(<Identifier> "::")*> <t:Identifier> => {
        Path { absolute: a.is_some(),
               ids: h }
    };

pub SimpleStatement: SimpleStatement = {
    Import,
    <l_location:@L> "Del" <rhs:Expression> <r_location:@L> => SimpleStatement
        {
            l_location,
            r_location,
            node: SimpleStatementKind::Del{rhs},
        },
    <l_location:@L> <lhs:Expression> "=" <rhs:Expression> <r_location:@L> => SimpleStatement
        {
            l_location,
            r_location,
            node: SimpleStatementKind::Assign{lhs, rhs},
        },
    <l_location:@L> <lhs:Expression> "<=>" <rhs:Expression> <r_location:@L> => SimpleStatement
        {
            l_location,
            r_location,
            node: SimpleStatementKind::Exchange{lhs, rhs},
        },
    <l_location:@L> <lhs:Expression> "=>" <rhs:Expression> <r_location:@L> => SimpleStatement
        {
            l_location,
            r_location,
            node: SimpleStatementKind::Send{lhs: rhs,rhs: lhs},
        },
    <l_location:@L> <expression: Expression> <r_location:@L> => SimpleStatement
        {
            l_location,
            r_location,
            node: SimpleStatementKind::Expression{expression},
        }
    };


pub Expression: Expression = {
    ExpressionPrecedence8,
    };

ExpressionPrecedence8: Expression = {
    <l_location:@L> <lhs:ExpressionPrecedence8> "Or" <rhs:ExpressionPrecedence7> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::Or, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },

    ExpressionPrecedence7,
};

ExpressionPrecedence7: Expression = {
    <l_location:@L> <lhs:ExpressionPrecedence7> "And" <rhs:ExpressionPrecedence6> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::And, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    ExpressionPrecedence6,
};

ExpressionPrecedence6: Expression = {
    <l_location:@L> <lhs:ExpressionPrecedence6> "==" <rhs:ExpressionPrecedence5> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::EQ, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    <l_location:@L> <lhs:ExpressionPrecedence6> "!=" <rhs:ExpressionPrecedence5> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::NE, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    <l_location:@L> <lhs:ExpressionPrecedence6> "<" <rhs:ExpressionPrecedence5> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::LT, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
        <l_location:@L> <lhs:ExpressionPrecedence6> ">" <rhs:ExpressionPrecedence5> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::GT, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    ExpressionPrecedence5
}

// ArithmeticExpression
ExpressionPrecedence5: Expression = {
    <l_location:@L>  <lhs:ExpressionPrecedence5> "+" <rhs:ExpressionPrecedence4> <r_location:@L> =>  Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::Sum, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    <l_location:@L> <lhs:ExpressionPrecedence5> "-" <rhs:ExpressionPrecedence4> <r_location:@L>=>  Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::Sub, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    ExpressionPrecedence4
}

// FactorExpression
ExpressionPrecedence4: Expression = {
    <l_location:@L> <lhs:ExpressionPrecedence4> "*" <rhs:ExpressionPrecedence3> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::Mul, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    <l_location:@L> <lhs:ExpressionPrecedence4> "/" <rhs:ExpressionPrecedence3> <r_location:@L> => Expression
        {
            l_location,
            r_location,
            node: ExpressionKind::BinaryOp{op: BinaryOp::Div, lhs: Box::new(lhs), rhs: Box::new(rhs)},
        },
    ExpressionPrecedence3
};

ExpressionPrecedence3: Expression = {
    ExpressionPrecedence2
}

ExpressionPrecedence2: Expression = {
    <l_location:@L> "Not" <expression:ExpressionPrecedence2> <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::UnaryOp{op: UnaryOp::Not, expr: Box::new(expression)},
        },
    <l_location:@L> "'" <expression:ExpressionPrecedence2> <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::UnaryOp{op: UnaryOp::Dereference, expr: Box::new(expression)},
        },

    ExpressionPrecedence1
}

ExpressionPrecedence1: Expression = {
    LiteralExpression,
    List,
    FunctionCall,
    MultipleDereference,
    Variable,
    "(" <Expression> ")",

};

LiteralExpression: Expression = {
    BoolLiteral,
    IntLiteral,
    StringLiteral,
    FloatLiteral,
    NullLiteral
};

FunctionCall: Expression = {
    <l_location:@L> <function: "Identififer"> "{" <args: Parameters> "}" <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::Call{function, args: args.into_iter().map(Box::new).collect()},
        }
}

MultipleDereference: Expression = {
        <l_location:@L>  "Deref" "{" <expression:Expression>  "," <r: Expression> "}" <r_location:@L>  => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::UnaryOp{op: UnaryOp::MultipleDereference(Box::new(r)), expr: Box::new(expression)},
        },
}
#[inline]
Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
Semicolon<T>: Vec<T> = { // (1)
    <mut v:(<T> ";")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
#[inline]
Statements: Statements = {
    <statements: Semicolon<SimpleStatement>> => Statements::SimpleStatements(statements),
    <statement:OneLineStatement> => Statements::OneLineStatement(statement)
};

#[inline]
SimpleStatements = Semicolon<SimpleStatement>;

#[inline]
Parameters = Comma<Expression>;

#[inline]
Elements = Comma<Expression>;

Variable: Expression = {
   <l_location:@L> <name:"Identififer"> <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::Var{name}
        }
}

List: Expression = {
    <l_location:@L> "[" <elements: Parameters> "]"<r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::List {
            elements: elements.into_iter().map(Box::new).collect()
        },
        }
};

NullLiteral: Expression = {
    <l_location:@L> <n:"Null"> <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::Null,
        }
};


IntLiteral: Expression = {
   <l_location:@L> <n:"Integer"> <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::Int{value: n}
        }
};

FloatLiteral: Expression = {
   <l_location:@L> <n:"Float"> <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::Float{value: n},
        }
}

BoolLiteral: Expression = {
    <l_location:@L> "True" <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::Bool{value: true}
        },
    <l_location:@L> "False" <r_location:@L> => Expression 
        {
        l_location,
        r_location,
        node: ExpressionKind::Bool{value: false}
        },
};

StringLiteral: Expression = {
   <l_location:@L> <s: "String"> <r_location:@L> => Expression {
    l_location,
    r_location,
    node: ExpressionKind::String{value: s}}
};

Identifier: String = {
    <i: "Identififer"> => i
};

extern {
    type Location = LexLocation;
    type Error = LexError;

    enum TokenKind {
    "Identififer" => TokenKind::Identifier (<String>),
    "Integer" => TokenKind::IntegerLiteral (<i64>),
    "Float" => TokenKind::FloatLiteral (<f64>),
    "String" => TokenKind::StringLiteral (<String>),
    "NewLine" => TokenKind::NewLine,
    "EndOfFile" => TokenKind::EndOfFile,
    "(" => TokenKind::LeftParenthesis,
        ")" => TokenKind::RightParenthesis,
        "[" => TokenKind::LeftSquareBracket,
        "]" => TokenKind::RightSquareBracket,
        ":" => TokenKind::Colon,
        "," => TokenKind::Comma,
        ";" => TokenKind::Semicolon,
        "*" => TokenKind::Multiply,
        "+" => TokenKind::Plus,
        "-" => TokenKind::Minus,
        "/" => TokenKind::Slash,
        "|" => TokenKind::VerticalBar, // '|'
        "&" => TokenKind::Ampersand,    // '&'
        "<" => TokenKind::LessThan,
        ">" => TokenKind::GreaterThan,
        "=" => TokenKind::Equal,
        "." => TokenKind::Dot,
        "%" => TokenKind::Percent,
        "{" => TokenKind::LeftCurlyBrace,
        "}" => TokenKind::RightCurlyBrace,
        "==" => TokenKind::EqualEqual,
        "!=" => TokenKind::NotEqual,
        "=<" => TokenKind::LessThanEqual,
        ">=" => TokenKind::GreaterThanEqual,
        ">>" => TokenKind::RightShift,
        "<<" => TokenKind::LeftShift,
        "//" => TokenKind::DoubleSlash,
        "=>" => TokenKind::Send,
        "..." => TokenKind::Ellipsis,
        "::" => TokenKind::ColonColon,
        "'" => TokenKind::Apostrophe,
        "<=>" => TokenKind::Exchange,
        "Replace" => TokenKind::Replace,
        "Loop" => TokenKind::Loop,
        "Predicate" => TokenKind::Predicate,
        "SubProgram" =>TokenKind::SubProgram,
        "@" => TokenKind::At,
        "!" => TokenKind::Bang,
        "Return" => TokenKind::Return,
        "False" => TokenKind::False,
        "Null" => TokenKind::Null,
        "True" => TokenKind::True,
        "And" => TokenKind::And,
        "Del" => TokenKind::Del,
        "Not" => TokenKind::Not,
        "Or" => TokenKind::Or,
        "Let" => TokenKind::Let,
        "Const" => TokenKind::Const,
        "Deref" => TokenKind::Deref,
        "Import" => TokenKind::Import,
        "From" => TokenKind::From,
        "As" => TokenKind::As,
    }
}