use crate::ast::*;
use crate::lexer::LexError;
use crate::lexer::location::Location as LexLocation;
use crate::lexer::token::Token;
grammar;

pub Algorithm: Algorithm = {
    <lines:FileLine*> => Algorithm::Body{lines},
};

pub FileLine: FileLine = {

        FormulaLine,
        CommonLine
};

pub FormulaLine: FileLine = {
         <labels: LabelsDeclaration?> <statement:OneLineStatement> "END_OF_FILE"=> { 
        match labels {
                        Some(labels) => FileLine::FormulaLine{labels, statement},
                        None => FileLine::FormulaLine{labels: vec![], statement}
                    }
                },
        <labels: LabelsDeclaration?> <statement:OneLineStatement> "NEW_LINE"=> { 
        match labels {
                        Some(labels) => FileLine::FormulaLine{labels, statement},
                        None => FileLine::FormulaLine{labels: vec![], statement}
                    }
                },
}

pub CommonLine: FileLine = {
        <labels: LabelsDeclaration?> <statements:Statements> "NEW_LINE"=> { 
        match labels {
                        Some(labels) => FileLine::Line{labels, statements},
                        None => FileLine::Line{labels: vec![], statements}
                    }
                },
    <labels: LabelsDeclaration?> <statements:Statements> "END_OF_FILE"=> { 
        match labels {
                        Some(labels) => FileLine::Line{labels, statements},
                        None => FileLine::Line{labels: vec![], statements}
                    }
                },
};


pub LabelsDeclaration: Vec<String> = {
    <labels: Labels> "..." => labels
};

#[inline]
Labels: Vec<String> = { // (1)
    <mut v:(<Identifier> ",")*> <e:Identifier?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
pub OneLineStatement: OneLineStatement = {
    Loop
};


pub Predicate: Statement = {
    "PREDICATE" "{" <condition:BoolBinaryOperator> "}" <l:Statement> "|" <r:Statement> => {
        Statement::Predicate{
            condition
          , if_true: Box::new(l)
          , if_false: Box::new(r)}
        }
};

pub Loop: OneLineStatement = {
    "LOOP" "{" <a:Expression> "," <b:Expression> "," <c:Expression> "}" <alpha: Identifier> <betta: Identifier> => OneLineStatement::Loop{
        initial_value: a
      , step: b
      , last_value: c
      , label_unitl: alpha, 
      label_to: betta }
};

pub UnconditionalJump: Statement = {
    "@" <label: Identifier> => Statement::UnconditionalJump{label},
};

pub Statement: Statement = {
    Predicate,
    UnconditionalJump,
    <lhs:Expression> "=" <rhs:Expression> => Statement::Assign{lhs, rhs},
    <lhs:Expression> "<=>" <rhs:Expression> => Statement::Exchange{lhs, rhs},
    <lhs:Expression> "=>" <rhs:Expression> => Statement::Send{lhs: rhs,rhs: lhs},
    "!"                     => Statement::Exit,
    <expression: Expression> => Statement::Expression{expression},
    };



pub Expression: Expression = {
    BoolBinaryOperator,
    };

ArithmeticExpression: Expression = {
    <lhs:ArithmeticExpression> "+" <rhs:FactorExpression> => Expression::BinaryOp{op: BinaryOp::Sum, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    <lhs:ArithmeticExpression> "-" <rhs:FactorExpression> => Expression::BinaryOp{op: BinaryOp::Sub, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    FactorExpression
}

BoolBinaryOperator: Expression = {
    <lhs:BoolBinaryOperator> "OR" <rhs:AndOperator> => Expression::BinaryOp{op: BinaryOp::Or, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    AndOperator,
};

AndOperator: Expression = {
    <lhs:AndOperator> "AND" <rhs:BoolPrimaryOperator> => Expression::BinaryOp{op: BinaryOp::And, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    BoolPrimaryOperator,
};


FactorExpression: Expression = {
    <lhs:PrimaryExpression> "*" <rhs:FactorExpression> => Expression::BinaryOp{op: BinaryOp::Mul, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    <lhs:PrimaryExpression> "/" <rhs:FactorExpression> => Expression::BinaryOp{op: BinaryOp::Div, lhs: Box::new(lhs), rhs: Box::new(rhs)}, 
    PrimaryExpression
};

UnaryOperator: Expression = {
    "!" <expression:PrimaryExpression> => Expression::UnaryOp{op: UnaryOp::Not, expr: Box::new(expression)},
    "'" <expression:PrimaryExpression> => Expression::UnaryOp{op: UnaryOp::Dereference, expr: Box::new(expression)},
}
#[inline]
Comma<T>: Vec<T> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
Parameters = Comma<Expression>;

#[inline]
Semicolon<T>: Vec<T> = { // (1)
    <mut v:(<T> ";")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
Statements = Semicolon<Statement>;

FunctionCall: Expression = {
    <function: "IDENTIFIER"> "{" <args: Parameters> "}" => Expression::Call{function, args: args.into_iter().map(Box::new).collect()},
}

BoolPrimaryOperator: Expression = {
    <lhs:BoolPrimaryOperator> "==" <rhs:ArithmeticExpression> => Expression::BinaryOp{op: BinaryOp::EQ, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    <lhs:BoolPrimaryOperator> "!=" <rhs:ArithmeticExpression> => Expression::BinaryOp{op: BinaryOp::NE, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    <lhs:BoolPrimaryOperator> "<" <rhs:ArithmeticExpression> => Expression::BinaryOp{op: BinaryOp::LT, lhs: Box::new(lhs), rhs: Box::new(rhs)},
    ArithmeticExpression
}


PrimaryExpression: Expression = {
    Bool,
    IntLiteral,
    UnaryOperator,
    FunctionCall,
    Variable,
    "(" <Expression> ")",

};

Variable: Expression = {
    <name:"IDENTIFIER"> => Expression::Var{name}
}

IntLiteral: Expression = {
    <n:"INTEGER_LITERAL"> => Expression::Int{value: n},
};

Bool: Expression = {
    "TRUE" => Expression::Bool{value: true},
    "FALSE" => Expression::Bool{value: false},

}

Identifier: String = {
    <i: "IDENTIFIER"> => i
};


extern {
    type Location = LexLocation;
    type Error = LexError;

    enum Token {
    "IDENTIFIER" => Token::Identifier (<String>),
    "INTEGER_LITERAL" => Token::IntegerLiteral (<i64>),
    "FLOAT_LITERAL" => Token::FloatLiteral (<f64>),
    "STRING_LITERAL" => Token::StringLiteral (<String>),
    "NEW_LINE" => Token::NewLine,
    "END_OF_FILE" => Token::EndOfFile,
    "(" => Token::LeftParenthesis,
        ")" => Token::RightParenthesis,
        "[" => Token::LeftSquareBracket,
        "]" => Token::RightSquareBracket,
        ":" => Token::Colon,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        "*" => Token::Multiply,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "/" => Token::Slash,
        "|" => Token::VerticalBar, // '|'
        "&" => Token::Ampersand,    // '&'
        "<" => Token::LessThan,
        ">" => Token::GreaterThan,
        "=" => Token::Equal,
        "." => Token::Dot,
        "%" => Token::Percent,
        "{" => Token::LeftCurlyBrace,
        "}" => Token::RightCurlyBrace,
        "==" => Token::EqualEqual,
        "!=" => Token::NotEqual,
        "=<" => Token::LessThanEqual,
        ">=" => Token::GreaterThanEqual,
        ">>" => Token::RightShift,
        "<<" => Token::LeftShift,
        "//" => Token::DoubleSlash, // '//'
        "=>" => Token::Send,
        "..." => Token::Ellipsis,
        "'" => Token::Apostrophe,
        "<=>" => Token::Exchange,
        "REPLACE" => Token::Replace,
        "LOOP" => Token::Loop,
        "PREDICATE" => Token::Predicate,
        "@" => Token::At,
        "!" => Token::Bang,

        // Basic Keywords:
        "FALSE" => Token::False,
        "NULL" => Token::Null,
        "TRUE" => Token::True,
        "AND" => Token::And,
        "DEL" => Token::Del,
        "NOT" => Token::Not,
        "OR" => Token::Or,
        "LET" => Token::Let,
        "CONST" => Token::Const,
    }
}